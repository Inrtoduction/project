import os


class ExamPreparation:
    # Initialize instance variables to store user information
    def __init__(self):
        self.user_name = ""
        self.selected_subject = ""

    def welcome_user(self):
        self.user_name = input("\033[1;32mEnter your name:\033[0m ")
        os.system('cls' if os.name == 'nt' else 'clear')

        print(
            f"\033[1;36mHello, {self.user_name}ðŸ‘‹! Welcome to the Exam Preparation Program.\033[0m"
        )

    def select_subject(self):
        while True:
            # Prompt the user to select a subject
            print("\n\033[1mSelect a subject:\033[0m")
            print("1) Algebra and Geometry")
            print("2) Calculus-1")
            print("3) Introduction to Engineering")
            print("4) Programming language (Java)")
            subject_choice = input("\033[1;32mEnter the subject number:\033[0m ")
            if subject_choice in ['1', '2', '3', '4']:
                return subject_choice
            else:
                print(
                    "\033[1;31mInvalid choice. Please enter a valid subject number.\033[0m"
                )

    def select_topic(self, subject):
        # Dictionary containing topics for each subject
        topics = {
            '1': [
                {
                    "name": "Gaussian Elimination",
                    "link":
                    "https://www.youtube.com/watch?v=eDb6iugi6Uk&pp=ugMICgJydRABGAHKBQ5tYXRyaXggYWxnZWJyYQ%3D%3D"
                },
                {
                    "name": "Vectors",
                    "link":
                    "https://www.youtube.com/watch?v=2_21erD-nBg&list=PL0h9jlLEdduOAyrst-S-ulUuCBbOdJKsm"
                },
                {
                    "name": "Inverse of a Matrix",
                    "link":
                    "https://www.youtube.com/watch?v=Fg7_mv3izR0&pp=ygUSaW52ZXJzZSBvZiBtYXRyaXgg"
                },
                {
                    "name": "Cramer's rule",
                    "link":
                    "https://www.youtube.com/watch?v=Ot87qLTODdQ&pp=ygUUY3JpbWVycyBydWxlIGFsZ2VicmE%3D"
                },
                {
                    "name": "Eigenevalues and Eigenevectors",
                    "link":
                    "https://www.youtube.com/watch?v=TQvxWaQnrqI&t=689s&pp=ygUcZWlnZW4gdmFsdWVzICYgZWlnZW4gdmVjdG9ycw%3D%3D"
                },
            ],
            '2': [
                {
                    "name": "Derivative",
                    "link":
                    "https://docs.google.com/presentation/d/15njwnk5atPC5JHuiv5P0YZo8LOTh7l0-/edit?usp=sharing&ouid=106045512330229406079&rtpof=true&sd=true"
                },
                {
                    "name": "The chain rule",
                    "link":
                    "https://docs.google.com/presentation/d/1ZdQrTwxPo3ESk8mal8Z3P23C6lIr99Or/edit?usp=sharing&rtpof=true&sd=true"
                },
                {
                    "name": "Hyperbolic function",
                    "link":
                    "https://drive.google.com/file/d/1kSKFu6yhoEIP7luIV3GP7RGHmzXcawkY/view?usp=sharing"
                },
                {
                    "name": "Derivative of hyperbolic invers",
                    "link":
                    "https://drive.google.com/file/d/1QlOn2kDlGFflfMi6qJntrvq4QFRF9dSJ/view?usp=sharing"
                },
                {
                    "name": "Ð¡alculus formulas",
                    "link":
                    "https://drive.google.com/file/d/1odPowa-fLKFKswl6uMWxvGjmhq1jOavV/view?usp=sharing"
                },
            ],
            '3': [
                {
                    "name": "Computer glossary",
                    "link":
                    "https://docs.google.com/document/d/1hyzf-2ONmUDA5b5Si6l3w_FFgdAOVa7u/edit?usp=sharing&ouid=116220306244149182067&rtpof=true&sd=true"
                },
                {
                    "name": "Why program?",
                    "link":
                    "https://docs.google.com/document/d/1vOQdZux95v-fYnYGeRZqfuOrPpfznuvFXEUqu8SADn4/edit?usp=sharing"
                },
                {
                    "name": "Variables",
                    "link":
                    "https://docs.google.com/document/d/15SZf75W5cGy7-5xJaxRk4JlOwKrOiogpb43V9-jvq68/edit?usp=sharing"
                },
                {
                    "name": "Conditional execution",
                    "link":
                    "https://docs.google.com/document/d/17ZGUTOLBv1fIt1h-xUaKIgOv2p9fZjKoGi8oywYojWU/edit?usp=sharing"
                },
                {
                    "name": "Functions",
                    "link":
                    "https://docs.google.com/document/d/1KjesIEjkd3n8l3gQE2-Pvssho0pOx6CBhxsN4VI-Pys/edit?usp=sharing"
                },
            ],
            '4': [
                {
                    "name": "For loop",
                    "link": "https://youtu.be/Rn16ugyorX0?si=n33mbwpyXEobuELl"
                },
                {
                    "name": "While loop",
                    "link": "https://youtu.be/t6gmQaTMTtM?si=yH0nKK9pLqDZxVVv"
                },
                {
                    "name": "Arrays",
                    "link": "https://youtu.be/ei_4Nt7XWOw?si=J21hPBXRfwsm6DGj"
                },
                {
                    "name": "ArrayList",
                    "link": "https://youtu.be/NbYgm0r7u6o?si=SITX_qPcZsombc9X"
                },
                {
                    "name": "2D Arrays",
                    "link": "https://youtu.be/alwukGslBG8?si=Zf2TTex5eXbb8wMr"
                },
            ],
        }

        while True:
            # Prompt the user to select a topic for the chosen subject
            print(f"\n\033[1mSelect a topic for {self.selected_subject}:\033[0m")
            for i, topic in enumerate(topics[subject], 1):
                # Display the available topics with their corresponding numbers
                print(f"{i}) {topic['name']}")

            # Get the user's choice for the topic
            topic_choice = input("\033[1;32mEnter the topic number:\033[0m ")
            if topic_choice.isdigit() and 1 <= int(topic_choice) <= len(topics[subject]):
                # Retrieve the selected topic information based on the user's choice
                selected_topic = topics[subject][int(topic_choice) - 1]
                return selected_topic["name"], selected_topic["link"]
            else:
                print(
                    "\033[1;31mInvalid choice. Please enter a valid topic number.\033[0m"
                )

    def main(self):
        while True:
            # Run the welcome user, select subject, and select topic functions
            self.welcome_user()
            subject_choice = self.select_subject()

            # Dictionary mapping subject numbers to subject names
            subjects = {
                '1': "Algebra and Geometry",
                '2': "Calculus-1",
                '3': "Introduction to Engineering",
                '4': "Programming language (Java)",
            }

            # Set the selected subject based on the user's choice
            self.selected_subject = subjects[subject_choice]
             # Get the selected topic and its link
            selected_topic_name, selected_topic_link = self.select_topic(
                subject_choice)

            # Display the selected information to the user
            print(
                f"\n\033[1;36m{self.user_name}, here is the information for your selection:\033[0m"
            )
            print(f"\033[1;34mSubject:\033[0m {self.selected_subject}")
            print(f"\033[1;34mTopic:\033[0m {selected_topic_name}")
            print(f"\033[1;34mLink:\033[0m {selected_topic_link}")

            # Ask the user if they want to search for another topic
            another_search = input(
                "\n\033[1;32mDo you want to search for another topic? (yes/no):\033[0m ").lower()
            if another_search != 'yes':
                print("\033[1;36mGoodbye! Have a great day!\033[0m")
                break


# Check if the current Python script is being run as the main program (not imported as a module)
if __name__ == "__main__":
    # Create an instance of the ExamPreparation class and run the main function
    exam_prep = ExamPreparation()
    exam_prep.main()
